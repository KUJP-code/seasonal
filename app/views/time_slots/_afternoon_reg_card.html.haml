-# locals: (confirmed_slot_regs:, confirmed_opt_regs:,
  child:, opt_regs:, registrations:, slot:)

:ruby
  return if slot.nil?

  confirmed = confirmed_slot_regs.any? { |reg| reg.registerable_id == slot.id }
  registered = registrations.any? do |reg|
    reg.registerable_id == slot.id && reg.registerable_type == 'TimeSlot'
  end

  # Departure variables
  depart_category = child.kindy ? :k_departure? : :departure?
  depart_options = slot.options.select(&depart_category).sort_by(&:modifier)
  confirmed_depart = depart_options.find do |o|
    confirmed_opt_regs.any? { |reg| reg.registerable_id == o.id }
  end

- if slot.closed && current_user.customer?
  %p.d-flex.align-items-center.justify-content-center.text-bg-warning.p-1.rounded
    = t('pm_closed')

- else
  - if confirmed
    %p.fw-bold.fs-5 #{slot.special? ? slot.name : t('.afternoon')}: ◯

    - if activity_modifier(slot, child).positive?
      %p= t('.extra_charge',
            cost: number_to_currency(activity_modifier(slot, child)))

    - if slot.snack
      %p #{t('.snack')}: ◯

    - slot.options.each do |opt|
      - next if opt_regs.none? { |reg| reg.registerable_id == opt.id }

      %p #{opt.name}: ◯

  - else
    .afternoon.w-100{ data: { controller: 'popup',
                              action: 'register:toggle->popup#listen' } }
      %div{ class: 'add_reg w-100 form-check form-switch p-0 d-flex ' \
                   'flex-column justify-content-center align-items-center ' \
                   'gap-3',
            data: { controller: 'register',
                    'register-child-value': child.id,
                    'register-id-value': slot.id,
                    'register-modifier-value': activity_modifier(slot, child),
                    'register-name-value': slot.name.concat(' (午後)').tr(' ', '_'),
                    'register-snack-value': (slot.snack && !child.own_snack?).to_s,
                    'register-type-value': 'TimeSlot' } }
        %label.fw-bold.fs-5.form-check-label{ for: "a_slot#{slot.id}",
                                              'data-register-target': 'name' }
          = slot.special? ? slot.name : "午後（通常レッスン）"
          %br/
          %span.fw-normal.text-muted.fs-6
            - if slot.special?
              = "(#{slot.start_time.strftime('%H:%M')}–#{slot.end_time.strftime('%H:%M')})"
            - else
              = "(13:30–18:30)"

        - if confirmed_slot_regs.any? { |reg| reg.registerable_id == slot.id }
          %p ◯
        - elsif child.regular_schedule && child.regular_schedule.has?(slot.start_time)
          %p.text-bg-danger.rounded.p-1= t('.regular_day')
        - elsif slot.closed?
          %p.d-flex.align-items-center.justify-content-center.text-bg-warning.p-1.rounded
            = t('pm_closed')

        = check_box_tag "a_slot#{slot.id}",
                        '', (true if registered),
                        class: 'form-check-input m-0',
                        data: { action: 'register#toggle',
                                'register-target': 'button' },
                        role: 'switch'

        %div{ class: "options mt-2 #{'hidden' unless registered}",
              'data-popup-target': 'popup' }

          - if activity_modifier(slot, child).positive?
            %p= t('.extra_charge',
                  cost: number_to_currency(activity_modifier(slot, child)))

          - if slot.snack
            - if child.own_snack?
              %p おやつ持参（料金なし）
            - else
              %p #{t('.snack')}: ◯

          - slot.options.each do |opt|
            - next if opt.time?

            - registered = opt_regs.any? { |reg| reg.registerable_id == opt.id }

            - if confirmed_opt_regs.any? { |reg| reg.registerable_id == opt.id }
              %p #{opt.name}: ◯
            - else
              %div{ class: 'add_reg form-check form-switch p-0 d-flex ' \
                           'justify-content-center align-items-center ' \
                           'gap-2 w-100',
                    data: { controller: 'register',
                            'register-child-value': child.id,
                            'register-cost-value': opt.cost,
                            'register-id-value': opt.id,
                            'register-type-value': 'Option' } }
                %label.form-check-label{ for: "opt#{opt.id}",
                                         'data-register-target': 'name' }
                  = opt.name
                = check_box_tag "opt#{opt.id}",
                                '', (true if registered),
                                class: 'form-check-input m-0',
                                data: { action: 'register#toggle',
                                        'register-target': 'button' },
                                role: 'switch'

          - if confirmed_depart
            %p #{confirmed_depart.name}: ◯
          - elsif depart_options.size.positive?
            = render 'options/time_options',
                     child_id: child.id, opt_regs:,
                     options: depart_options, slot:,
                     translation_key: 'depart_options'
